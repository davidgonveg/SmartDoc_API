[tool:pytest]
# =============================================================================
# PYTEST CONFIGURATION FOR SMARTDOC RESEARCH AGENT
# =============================================================================

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Asyncio configuration
asyncio_mode = auto

# Output configuration
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --failed-first
    --maxfail=5
    -p no:warnings

# Markers for test categorization
markers =
    unit: Unit tests - fast, no external dependencies
    integration: Integration tests - may call external services
    e2e: End-to-end tests - require full system running
    slow: Tests that take more than 10 seconds
    web: Tests that require internet connection
    ollama: Tests that require Ollama running
    agent: Tests specific to SmartDoc Agent
    search: Tests related to web search functionality
    extraction: Tests related to content extraction
    mock: Tests using only mocked dependencies
    real: Tests using real external services
    performance: Performance and benchmark tests
    concurrent: Tests for concurrent operations
    rate_limit: Tests for rate limiting functionality

# Minimum test coverage (if using pytest-cov)
# addopts = --cov=agent-api/app --cov-report=html --cov-report=term-missing --cov-fail-under=80

# Test filtering examples:
# Run only unit tests: pytest -m unit
# Run integration tests: pytest -m integration  
# Skip slow tests: pytest -m "not slow"
# Run web tests only: pytest -m web
# Run tests without external dependencies: pytest -m "not (web or ollama)"

# Timeout configuration (if using pytest-timeout)
timeout = 300
timeout_method = thread

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Filterwarnings - suppress known warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Test collection timeout
collect_timeout = 60

# Parallel testing configuration (if using pytest-xdist)
# addopts = -n auto

# JUnit XML output for CI/CD
# junit_xml = tests/junit.xml
# junit_logging = all

# HTML report (if using pytest-html)
# htmlpath = tests/report.html
# self_contained_html = true